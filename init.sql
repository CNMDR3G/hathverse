insert into problem values (DEFAULT, 'Hello World', 'Write a function `hello` that print out "Hello world!".', E'{-# LANGUAGE NoImplicitPrelude #-}\nmodule Hello where\nimport Test.IOSpec (IOSpec, Teletype, putStrLn)\ntype IO a = IOSpec Teletype a\n\nhello :: IO ()\nhello = putStrLn "Hello world!"\n', 'Hello', E'import Test.Hspec\nimport Test.IOSpec\nimport Hello (hello)\n\ngetOutput :: Effect () -> String\ngetOutput (Done _) = ""\ngetOutput (Print c eff) = c : getOutput eff\ngetOutput _ = " ERROR"\n\nmain :: IO ()\nmain = hspec $\n  describe "hello" $\n    it "prints out \\"Hello world!\\" correctly" $\n      getOutput (evalIOSpec hello singleThreaded) `shouldBe` "Hello world!\\n"\n');
insert into problem values (DEFAULT, 'Prime Number', 'Compute a list `primes` that contains at least the first 100 prime numbers.', E'module Prime where\n\nprimes :: [Integer]\nprimes = undefined', 'Prime', E'import Test.Hspec\nimport Prime\n\nfirst100primes :: [Integer]\nfirst100primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541]\n\nmain :: IO ()\nmain = hspec $\n  describe "test" $\n    it "computes prime numbers" $\n      take 100 primes `shouldBe` first100primes\n');
